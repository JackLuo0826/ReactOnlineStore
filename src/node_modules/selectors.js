import R from 'ramda';

export const getProductById = (state, id) => R.prop(id, state.products);

// getting ownProps.params.id
export const getActiveCategoryId = ownProps => R.path(['params', 'id'], ownProps);

export const getProducts = (state, ownProps) => {
    const activeCategoryId = getActiveCategoryId(ownProps);
    
    // if current item category id = active category id
    const applyCategory = item => R.equals(
        activeCategoryId, 
        R.prop('categoryId', item)
    );

    const applySearch = item => R.contains(state.productsPage.search, R.prop('name', item));
    
    const products = R.compose(
        R.filter(applySearch),
        // filter if category id = currently active category id,
        // use R.when so when all categories are selected all products will be displayed
        R.when(() => activeCategoryId, R.filter(applyCategory)),
        R.map(id => getProductById(state, id))
    )(state.productsPage.ids);

    return products;
}

export const getRenderedProductsLength = state => R.length(state.productsPage.ids);

export const getTotalBasketCount = state => R.length(state.basket);

export const getTotalBasketPrice = state => {
    const totalPrice = R.compose(
        // sum all prices
        R.sum,
        // only take price from each item
        R.pluck('price'),
        // get array of products
        R.map(id => getProductById(state, id))
    )(state.basket);

    return totalPrice;
}

export const getCategories = state => R.values(state.categories);

export const getBasketProductsWithCount = state => {
    const uniqueIds = R.uniq(state.basket);
    // take all id inside basket, filter by selected id, 
    // then count the array length to find out total number of selected products inside basket
    const productCount = id => R.compose(
        R.length,
        R.filter(basketId => R.equals(id, basketId))
    )(state.basket);
    // add 'count' prop to product which record total count of associated product
    const productWithCount = product => R.assoc('count', productCount(product.id), product);
    const products = R.compose(
        R.map(productWithCount),
        R.map(id => getProductById(state, id))
    )(uniqueIds);

    return products;
}
